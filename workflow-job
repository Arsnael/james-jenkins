import java.util.List
import java.util.ArrayList
import java.util.UUID
import org.kohsuke.github.GitHub
import org.kohsuke.github.GHCommitState
import org.kohsuke.github.GHRepository

// This script must be called with a $branch parameter : branch to build specified
// This script must be called with a $repoURL parameter : specifies the commiter GitHub repo URL
// Optional $sha1 parameter : specifies the actual commit

def dockerIp = '62.210.100.33'
def hostname = 'james.linagora.com'
def maxRetries = 60
def author = extractUsername()
def authorParentURL = "https://github.com/${author}/james-parent.git"
def repoName = extractRepoName()

// Not given optional parameters are set to null
def propertyMissing(String name) { null }

public String extractUsername() {
    return "${repoURL}".split('/')[3];
}

public String extractRepoName() {
    return "${repoURL}".split('/')[4].split('\\.')[0];
}

public class CommitStatuses implements Serializable {
    def commitStatuses;

    public CommitStatuses() {
        commitStatuses = new ArrayList<CommitStatus>();
    }

    public void addPendingStatus(CommitStatus status) {
        commitStatuses.add(status);
        status.pending();
    }

    public void failPendingStatuses() {
        for (CommitStatus status : commitStatuses) {
            if (status.state.equals("PENDING")) {
                status.failure();
            }
        }
    }
}

public class CommitStatus implements Serializable {
    def repoName;
    def sha1;
    def description;
    def context;
    def state;

    public CommitStatus(String repoName, String sha1, String description, String step) {
        this.repoName = repoName;
        this.sha1 = sha1;
        this.description = description;
        this.context = "workflow-job step " + step;
    }

    def pending() { createPendingCommitStatus(); }
    def success() { createSuccessCommitStatus(); }
    def failure() { createFailureCommitStatus(); }

    private void createPendingCommitStatus() {
        createCommitStatus("PENDING");
    }

    private void createSuccessCommitStatus() {
        createCommitStatus("SUCCESS");
    }

    private void createFailureCommitStatus() {
        createCommitStatus("FAILURE");
    }

    @NonCPS
    private GHRepository getRepository(String repoName) {
        return GitHub.connectUsingOAuth(System.getenv("GITHUB_TOKEN")).getRepository("linagora/" + repoName);
    }

    @NonCPS
    private void createCommitStatus(String state) {
        this.state = state;
        if (sha1 != null) {
                getRepository(repoName).createCommitStatus(sha1, GHCommitState.valueOf(state), null, description, context);
        }
    }
}

public class Images implements Serializable {
    def cassandra = 'cassandra'
    def elasticSearch = 'elasticsearch:1.5.2'
    def buildId;
    def jamesCompile;
    def james;
    def gitPublish;
    
    public Images(String buildId) {
        jamesCompile = 'james-parent-compile-' + buildId;
        james = 'james-server-' + buildId;
        gitPublish = 'git/publish-' + buildId;
    }
}

public class Containers implements Serializable {
    def keystore = 'keystore';
    def cassandra;
    def elasticSearch;
    def integration;
    def jamesCompile;
    def james;
    def gitPublish;

    public Containers(String buildId) {
        cassandra = 'cassandra-' + buildId;
        elasticSearch = 'elasticSearch-' + buildId;
        integration = 'integration-' + buildId;
        jamesCompile = 'james-parent-compile-' + buildId;
        james = 'james-server-' + buildId;
        gitPublish = 'git-publish-' + buildId;
    }
}

def zipPath = '/destination/james-server-app-3.0.0-beta5-SNAPSHOT-app.zip' 
def keystorePath = '/keys/keystore'
def jamesCliWithOptions = '/root/james-server-app-3.0.0-beta5-SNAPSHOT/bin/james-cli.sh -h 127.0.0.1 -p 9999'
def useMavenCache = '--volumes-from maven-cache-deploy'

def executeCommand (command) {
   try {
       sh "${command}"
   } catch (Exception e) {
       echo "Error executing ${command} : ${e.getMessage()}"
       e.printStackTrace();
   }
}
def deleteImage = { name -> executeCommand("docker rmi --force=true ${name}") }
def deleteContainer = { name -> executeCommand("docker rm --force=true --volumes=true ${name}") }
def waitForCommandSuccess (command, maxRetries) {
    def tries = 0;
    while (tries++ < maxRetries) {
        try {
            sh command
            return true
        } catch (Exception e) {
            if (tries >= maxRetries) {
                throw new Exception("${} tries exceeded. ${command} failed.", e)
            }
            sh "sleep 1"
        }
    }
}

env.DOCKER_HOST = "tcp://${dockerIp}:2376"
env.DOCKER_CERT_PATH = '/keys/'
env.DOCKER_TLS_VERIFY = 'TRUE'

def flows = [:]

flows["${branch}"] = {
    def buildId = "${branch.toLowerCase()}-${UUID.randomUUID()}"
    def mergeBranch = "MERGE-${buildId}"
    def images = new Images(buildId);
    def containers = new Containers(buildId);
    def jamesLinks = "--link ${containers.cassandra}:cassandra --link ${containers.elasticSearch}:elasticsearch"
    def findImapPort = "export JAMES_PORT=`docker inspect -f '{{(index (index .NetworkSettings.Ports \"143/tcp\") 0).HostPort}}' ${containers.james}`"
    def integrationArguments = "${authorParentURL} ${branch} ${dockerIp} \$JAMES_PORT"
        
    def statuses = new CommitStatuses();
    def merging = new CommitStatus(repoName, sha1, "Merging", "1");
    statuses.addPendingStatus(merging);
    def building = new CommitStatus(repoName, sha1, "Building", "2");
    statuses.addPendingStatus(building);
    def dockering = new CommitStatus(repoName, sha1, "Dockering", "3");
    statuses.addPendingStatus(dockering);
    def deploying = new CommitStatus(repoName, sha1, "Deploying", "4");
    statuses.addPendingStatus(deploying);
    def testing = new CommitStatus(repoName, sha1, "Running integration tests", "5");
    statuses.addPendingStatus(testing);

    try {
        node {
            echo "Perform Merge"
            git url: authorParentURL, branch: branch
            sh "docker build -f DockerfileGitPublish --tag ${images.gitPublish} ."
            sh "docker run -t --name ${containers.gitPublish} -v /origin ${images.gitPublish} ${branch} ${mergeBranch}"
            merging.success();
        }
        node {
            echo "Building ${buildId}"
            sh "docker build --tag=${images.jamesCompile} ."
            sh "docker run --name=${containers.jamesCompile} ${useMavenCache} --volumes-from=${containers.gitPublish} --volume=/destination ${images.jamesCompile} -s ${mergeBranch}"
            building.success();
        }
        node {
            echo "Deploying ${buildId}"
            sh "docker cp ${containers.keystore}:${keystorePath} destination/conf"
            sh "docker cp ${containers.jamesCompile}:${zipPath} destination"
            
            sh "docker run --detach=true --name=${containers.cassandra} ${images.cassandra}"
            sh "docker run --detach=true --name=${containers.elasticSearch} ${images.elasticSearch}"
            sh "docker build --file=JamesRunDockerfile --tag=${images.james} ./"
            dockering.success()
            sh "docker run --detach=true --name=${containers.james} --hostname ${hostname} --expose=143 --publish-all=true ${jamesLinks} ${images.james}"
            
            echo 'Waiting for James server to be deployed'
            waitForCommandSuccess("docker exec ${containers.james} ${jamesCliWithOptions} listusers", maxRetries)
            sh "docker logs ${containers.james}"
            deploying.success();
        }
        node {
            echo "Configuring James Server"
            sh "docker exec ${containers.james} ${jamesCliWithOptions} adddomain domain"
            sh "docker exec ${containers.james} ${jamesCliWithOptions} adduser imapuser@domain password"
             
            echo "Running integration tests on ${buildId}"
            sh "${findImapPort} && docker run --name=${containers.integration} --entrypoint=\"/root/integration_tests.sh\" ${useMavenCache} ${images.jamesCompile} ${integrationArguments}"
            testing.success();
        }
    } finally {
        node {
            echo "Cleaning ${buildId}"
            deleteContainer(containers.gitPublish)
            deleteImage(images.gitPublish)

            deleteContainer(containers.jamesCompile)
            deleteImage(images.jamesCompile)

            deleteContainer(containers.cassandra)
            deleteContainer(containers.elasticSearch)
            deleteContainer(containers.james)
            deleteImage(images.james)

            deleteContainer(containers.integration)
            statuses.failPendingStatuses();
        }
    }
}

parallel flows
